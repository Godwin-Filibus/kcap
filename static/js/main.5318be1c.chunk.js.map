{"version":3,"sources":["Components/Header/girrafe.jpg","Components/Accordion/Accordion.js","Components/Accordion/ServicesInfo.js","Components/About/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Accordion","props","useState","open","setOpen","items","liItem","hidden","x","opacity","visible","exit","transition","div","className","onClick","val","span","title","initial","animate","variants","height","exits","type","when","ul","staggerChildren","map","item","index","li","key","amount","ServicesInfo","itemsList","style","padding","borderBottom","About","App","name","surname","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,qC,gTCsG5BC,MAlGf,SAAmBC,GAAQ,IAAD,EACAC,oBAAS,GADT,mBACjBC,EADiB,KACXC,EADW,KAElBC,EAAQJ,EAAMI,MAsCdC,EAAS,CACbC,OAAQ,CACNC,GAAI,GACJC,QAAS,GAEXC,QAAS,CACPF,EAAG,EACHC,QAAS,GAEXE,KAAM,CACJH,EAAG,IACHC,QAAS,EACTG,WAAY,KAIhB,OACE,kBAAC,IAAOC,IAAR,CAAYC,UAAU,OACpB,kBAAC,IAAOD,IAAR,CAAYC,UAAU,aAAaC,QAvDvC,WACEX,GAAQ,SAACY,GAAD,OAAUA,OAuDd,kBAAC,IAAOC,KAAR,KAAchB,EAAMiB,QAGtB,kBAAC,IAAD,KACGf,GACC,kBAAC,IAAOU,IAAR,CACEC,UAAU,cACVK,QAAQ,SACRC,QAAQ,UACRC,SA7DU,CAClBd,OAAQ,CACNe,OAAQ,GAEVZ,QAAS,CACPY,OAAQ,GAERV,WAAY,IAEdW,MAAO,CACLD,OAAQ,EACRV,WAAY,CACVY,KAAM,QACNC,KAAM,oBAiDFd,KAAK,SAEL,kBAAC,IAAOe,GAAR,CACEN,QAAQ,UACRD,QAAQ,SACRE,SAhDO,CACjBd,OAAQ,GACRG,QAAS,CACPE,WAAY,CACVe,gBAAiB,KAGrBhB,KAAM,CAEJc,KAAM,iBACNE,gBAAiB,MA0CLtB,EAAMuB,KAAI,SAACC,EAAMC,GACb,OACE,kBAAC,IAAOjB,IAAR,KACE,kBAAC,IAAOkB,GAAR,CAAWjB,UAAU,YACrBkB,IAAKF,EACLT,SAAUf,GACPuB,EAAKX,MAHR,IAGe,0BAAMJ,UAAU,UAAUe,EAAKI,kBC5DzDC,MAzBf,WACI,IAAMC,EAAY,CAChB,CAAEjB,MAAO,cAAee,OAAQ,MAChC,CAAEf,MAAO,iBAAkBe,OAAQ,MACnC,CAAEf,MAAO,gBAAiBe,OAAQ,MAClC,CAAEf,MAAO,aAAce,OAAQ,OAOjC,OACE,yBAAKnB,UAAU,WACfsB,MANY,CACZC,QAAS,YACTC,aAAc,8BAMd,uBAAGxB,UAAU,oBAAb,mBACE,kBAAC,EAAD,CAAWI,MAAM,kBAAkBb,MAAO8B,IAC1C,kBAAC,EAAD,CAAWjB,MAAM,gBAAgBb,MAAO8B,IACxC,kBAAC,EAAD,CAAWjB,MAAM,iBAAiBb,MAAO8B,IACzC,kBAAC,EAAD,CAAWjB,MAAM,oBAAoBb,MAAO8B,M,MCErCI,MAtBf,WACE,OACE,6BACE,yBAAKzB,UAAU,iBACb,2CACA,4BACE,yFACA,mHAIA,0EACA,qDACA,sDACA,kEACA,kECUK0B,MAjBf,WAAgB,IAAD,EACWtC,mBAAS,CAAEuC,KAAM,GAAIC,QAAS,KADzC,mBAGb,OAHa,UAIX,yBAAK5B,UAAU,IAEb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,4BAAQA,UAAU,YAChB,iCCRY6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5318be1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/girrafe.1d34f689.jpg\";","import React, { useState, useEffect } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport \"./images.css\";\r\n\r\nfunction Accordion(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const items = props.items;\r\n  function alternate() {\r\n    setOpen((val) => !val);\r\n  }\r\n\r\n  const arcVariants = {\r\n    hidden: {\r\n      height: 0,\r\n    },\r\n    visible: {\r\n      height: '',\r\n      // height:100,\r\n      transition: {},\r\n    },\r\n    exits: {\r\n      height: 0,\r\n      transition: {\r\n        type: \"tween\",\r\n        when: \"beforeChildren\",\r\n      },\r\n      // opacity:0\r\n    },\r\n  };\r\n\r\n  const ulVariants = {\r\n    hidden: {},\r\n    visible: {\r\n      transition: {\r\n        staggerChildren: 0.1,\r\n      },\r\n    },\r\n    exit: {\r\n      // scale:4\r\n      when: \"beforeChildren\",\r\n      staggerChildren: 0.2,\r\n    },\r\n  };\r\n\r\n  const liItem = {\r\n    hidden: {\r\n      x: -50,\r\n      opacity: 0,\r\n    },\r\n    visible: {\r\n      x: 0,\r\n      opacity: 1,\r\n    },\r\n    exit: {\r\n      x: 100,\r\n      opacity: 0,\r\n      transition: {},\r\n    },\r\n  };\r\n\r\n  return (\r\n    <motion.div className=\"arc\">\r\n      <motion.div className=\"header-arc\" onClick={alternate}>\r\n        <motion.span>{props.title}</motion.span>\r\n      </motion.div>\r\n\r\n      <AnimatePresence>\r\n        {open && (\r\n          <motion.div\r\n            className=\"content-arc\"\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n            variants={arcVariants}\r\n            exit=\"exits\"\r\n          >\r\n            <motion.ul\r\n              animate=\"visible\"\r\n              initial=\"hidden\"\r\n              variants={ulVariants}\r\n              //   exit=\"exit\"\r\n            >\r\n              {\r\n                  items.map((item, index)=>{\r\n                      return (\r\n                        <motion.div>\r\n                          <motion.li className=\"list-item\"\r\n                          key={index}\r\n                          variants={liItem}>\r\n                            {item.title} <span className=\"amount\">{item.amount}</span>\r\n                          </motion.li>\r\n                        </motion.div>\r\n                      );\r\n                  })\r\n              }\r\n            </motion.ul>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport default Accordion;\r\n","import React from 'react'\r\nimport Accordion from './Accordion'\r\n\r\nfunction ServicesInfo() {\r\n    const itemsList = [\r\n      { title: \"Insta Celeb\", amount: 2300 },\r\n      { title: \"Insta Bizzness\", amount: 2300 },\r\n      { title: \"Insta regular\", amount: 2300 },\r\n      { title: \"Insta plus\", amount: 2300 },\r\n    ];\r\n\r\n    const style = {\r\n      padding: \"2em 0 0 0\",\r\n      borderBottom: \"8px solid rgb(29, 27, 27)\",\r\n    };\r\n    return (\r\n      <div className=\"bg-black\"\r\n      style={style}\r\n      >\r\n      <p className=\"text-center mb-6\">Available Plans</p>\r\n        <Accordion title=\"Instagram plans\" items={itemsList} />\r\n        <Accordion title=\"Twitter plans\" items={itemsList} />\r\n        <Accordion title=\"SnapChat plans\" items={itemsList} />\r\n        <Accordion title=\"Sound Cloud plans\" items={itemsList} />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default ServicesInfo\r\n","import React from \"react\";\r\nimport \"./about.css\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div>\r\n      <div className=\"about-content\">\r\n        <p>Our Services</p>\r\n        <ol>\r\n          <li>Growing your accounts from scratch (np password required)</li>\r\n          <li>\r\n            Increasing your streams/likes/followers on Audiomack, Spotify,\r\n            Youtube, TikTok etc.\r\n          </li>\r\n          <li>Likes, reaches, impressions, and lots more</li>\r\n          <li>White board animation</li>\r\n          <li>Selling legit accounts</li>\r\n          <li>Designing beautiful business cards</li>\r\n          <li>Conversion of websites to apps</li>\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { motion } from \"framer-motion\";\nimport Carousel from \"./Components/Carousel/Carousel\";\nimport { MCarousel } from \"./Components/Carousel/MCarousel.js\";\nimport \"./Components/image.css\";\n\nimport Header from \"./Components/Header/Header\";\nimport ServiceInfo from './Components/Accordion/ServicesInfo'\nimport About from './Components/About/About'\n\nfunction App() {\n  const [user, setUser] = useState({ name: \"\", surname: \"\" });\n  \n  return (\n    <div className=\"\">\n      {/* <Header /> */}\n      <About />\n      <ServiceInfo />\n      <footer className=\"bg-black\" >\n        <div>\n          {/* <p>i am a footer</p> */}\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n\n// body, id, userId, title\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}